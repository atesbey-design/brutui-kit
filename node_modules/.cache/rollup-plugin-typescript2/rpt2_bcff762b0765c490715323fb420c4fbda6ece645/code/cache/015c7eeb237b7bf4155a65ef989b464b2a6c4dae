{"code":"import { __assign } from \"tslib\";\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { DialogOverlay, DialogContainer, DialogHeader, DialogTitle, DialogContent, DialogFooter, DialogButton, CloseButton, DialogImage } from './Dialog.styles';\r\nexport var Dialog = function (_a) {\r\n    var title = _a.title, content = _a.content, isOpen = _a.isOpen, onClose = _a.onClose, primaryAction = _a.primaryAction, secondaryAction = _a.secondaryAction, tertiaryAction = _a.tertiaryAction, _b = _a.size, size = _b === void 0 ? 'medium' : _b, _c = _a.overlay, overlay = _c === void 0 ? true : _c, className = _a.className, isCritical = _a.isCritical, image = _a.image, onOpen = _a.onOpen, _d = _a.closeOnOverlayClick, closeOnOverlayClick = _d === void 0 ? true : _d, customFooter = _a.customFooter, customHeader = _a.customHeader, _e = _a.draggable, draggable = _e === void 0 ? false : _e, _f = _a.minWidth, minWidth = _f === void 0 ? 300 : _f, _g = _a.minHeight, minHeight = _g === void 0 ? 200 : _g, style = _a.style, overlayStyle = _a.overlayStyle, headerStyle = _a.headerStyle, contentStyle = _a.contentStyle, footerStyle = _a.footerStyle;\r\n    var _h = useState({ x: 0, y: 0 }), position = _h[0], setPosition = _h[1];\r\n    var dialogRef = useRef(null);\r\n    var isDragging = useRef(false);\r\n    var dragOffset = useRef({ x: 0, y: 0 });\r\n    useEffect(function () {\r\n        if (isOpen && onOpen) {\r\n            onOpen();\r\n        }\r\n    }, [isOpen, onOpen]);\r\n    var handleMouseDown = function (e) {\r\n        if (!draggable || !dialogRef.current)\r\n            return;\r\n        isDragging.current = true;\r\n        var rect = dialogRef.current.getBoundingClientRect();\r\n        dragOffset.current = {\r\n            x: e.clientX - rect.left,\r\n            y: e.clientY - rect.top\r\n        };\r\n    };\r\n    var handleMouseMove = function (e) {\r\n        if (!isDragging.current)\r\n            return;\r\n        setPosition({\r\n            x: e.clientX - dragOffset.current.x,\r\n            y: e.clientY - dragOffset.current.y\r\n        });\r\n    };\r\n    var handleMouseUp = function () {\r\n        isDragging.current = false;\r\n    };\r\n    useEffect(function () {\r\n        if (draggable) {\r\n            window.addEventListener('mousemove', handleMouseMove);\r\n            window.addEventListener('mouseup', handleMouseUp);\r\n            return function () {\r\n                window.removeEventListener('mousemove', handleMouseMove);\r\n                window.removeEventListener('mouseup', handleMouseUp);\r\n            };\r\n        }\r\n    }, [draggable]);\r\n    var handleOverlayClick = function (e) {\r\n        if (closeOnOverlayClick && e.target === e.currentTarget) {\r\n            onClose();\r\n        }\r\n    };\r\n    return (React.createElement(DialogOverlay, { isOpen: isOpen, onClick: handleOverlayClick, style: overlayStyle },\r\n        React.createElement(DialogContainer, { ref: dialogRef, className: className, size: size, draggable: draggable, minWidth: minWidth, minHeight: minHeight, isCritical: isCritical, style: __assign(__assign({}, (draggable ? {\r\n                position: 'absolute',\r\n                left: position.x,\r\n                top: position.y,\r\n                cursor: isDragging.current ? 'grabbing' : 'grab'\r\n            } : {})), style) },\r\n            React.createElement(\"div\", { onMouseDown: handleMouseDown }, customHeader || (React.createElement(DialogHeader, { isCritical: isCritical, style: headerStyle },\r\n                React.createElement(DialogTitle, null, title),\r\n                React.createElement(CloseButton, { onClick: onClose }, \"\\u00D7\")))),\r\n            React.createElement(DialogContent, { style: contentStyle },\r\n                image && React.createElement(DialogImage, { src: image, alt: \"Dialog\" }),\r\n                content),\r\n            (primaryAction || secondaryAction || tertiaryAction || customFooter) && (React.createElement(DialogFooter, { style: footerStyle }, customFooter || (React.createElement(React.Fragment, null,\r\n                tertiaryAction && (React.createElement(DialogButton, { variant: \"tertiary\", onClick: tertiaryAction.onClick, disabled: tertiaryAction.disabled },\r\n                    tertiaryAction.icon,\r\n                    tertiaryAction.text)),\r\n                secondaryAction && (React.createElement(DialogButton, { variant: \"secondary\", onClick: secondaryAction.onClick, disabled: secondaryAction.disabled },\r\n                    secondaryAction.icon,\r\n                    secondaryAction.text)),\r\n                primaryAction && (React.createElement(DialogButton, { variant: \"primary\", onClick: primaryAction.onClick, disabled: primaryAction.disabled },\r\n                    primaryAction.icon,\r\n                    primaryAction.text)))))))));\r\n};\r\nexport default Dialog;\r\n","references":["/Users/ates/neobrutUI/neobrut-ui-kit/node_modules/@types/react/ts5.0/index.d.ts","/Users/ates/neobrutUI/neobrut-ui-kit/src/components/Dialog/Dialog.types.ts","/Users/ates/neobrutUI/neobrut-ui-kit/src/components/Dialog/Dialog.styles.ts"],"dts":{"name":"/Users/ates/neobrutUI/neobrut-ui-kit/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/Dialog/Dialog.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\r\nimport { DialogProps } from './Dialog.types';\r\nexport declare const Dialog: React.FC<DialogProps>;\r\nexport default Dialog;\r\n"}}
