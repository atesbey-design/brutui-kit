{"code":"export {};\r\n","references":[],"dts":{"name":"/Users/ates/neobrutUI/neobrut-ui-kit/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/Popover/Popover.types.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\nexport interface PopoverProps {\r\n    /**\r\n     * The content to be displayed inside the popover, which can include text, images, or other components\r\n     */\r\n    content: React.ReactNode;\r\n    /**\r\n     * Determines whether the popover is currently visible\r\n     */\r\n    isOpen: boolean;\r\n    /**\r\n     * The element that triggers the popover when clicked or focused\r\n     * - Can be a button, icon, or any other interactive element\r\n     */\r\n    triggerElement: React.ReactNode;\r\n    /**\r\n     * Position of the popover relative to the trigger element\r\n     * - Defines where the popover will appear (e.g., 'top', 'bottom', 'left', 'right', 'center', 'auto')\r\n     * - 'auto' allows the popover to determine the best position based on available space\r\n     */\r\n    position?: PopoverPosition;\r\n    /**\r\n     * Alignment of the popover content relative to the trigger element\r\n     * - Examples: 'start', 'center', 'end'\r\n     * - Useful for fine-tuning the position of the popover\r\n     */\r\n    alignment?: PopoverAlignment;\r\n    /**\r\n     * Callback function that triggers when the popover is opened\r\n     */\r\n    onOpen?: () => void;\r\n    /**\r\n     * Callback function that triggers when the popover is closed\r\n     */\r\n    onClose?: () => void;\r\n    /**\r\n     * Whether the popover should close when clicking outside its content\r\n     * - Default is `true` to provide a natural dismissal behavior\r\n     */\r\n    closeOnOutsideClick?: boolean;\r\n    /**\r\n     * Custom class names for additional styling or integration with CSS frameworks\r\n     */\r\n    className?: string;\r\n    /**\r\n     * Determines if the popover should adjust automatically to fit within the viewport\r\n     * - If `true`, the popover will reposition itself to prevent overflow\r\n     */\r\n    autoAdjust?: boolean;\r\n    /**\r\n     * Accessibility settings for the popover, ensuring compliance with WCAG guidelines\r\n     */\r\n    accessibility?: PopoverAccessibility;\r\n    /**\r\n     * Whether the popover includes an arrow pointing to the trigger element\r\n     * - Helps visually indicate the relationship between the popover and the trigger\r\n     */\r\n    hasArrow?: boolean;\r\n    /**\r\n     * Delay before the popover appears or disappears (in milliseconds)\r\n     * - Useful for adding smooth transitions\r\n     */\r\n    delay?: number;\r\n    /**\r\n     * Width of the popover, allowing customization of its size (e.g., '300px', '50%', 'auto')\r\n     */\r\n    width?: string;\r\n    /**\r\n     * Height of the popover, allowing customization of its size (e.g., '200px', 'auto')\r\n     */\r\n    height?: string;\r\n    /**\r\n     * Whether the popover is dismissible by pressing the 'Escape' key\r\n     * - Default is `true` to ensure easy dismissal for keyboard users\r\n     */\r\n    dismissibleByEscape?: boolean;\r\n    /**\r\n     * Animation type for popover appearance and dismissal\r\n     * - Examples: 'fade', 'slide', 'zoom', 'none'\r\n     */\r\n    animationType?: 'fade' | 'slide' | 'zoom' | 'none';\r\n    /**\r\n     * Whether the popover should remain in view while scrolling\r\n     * - Useful for popovers that contain important information or actions\r\n     */\r\n    sticky?: boolean;\r\n    /**\r\n     * Maximum height of the popover, after which a scrollbar will appear\r\n     * - Ensures that content does not overflow excessively on smaller screens\r\n     */\r\n    maxHeight?: string;\r\n    /**\r\n     * Whether the popover should support multiple trigger interactions (e.g., hover, click)\r\n     * - Examples: 'click', 'hover', 'focus'\r\n     */\r\n    triggerInteraction?: PopoverTriggerInteraction;\r\n    /**\r\n     * The offset distance between the popover and the trigger element, in pixels\r\n     * - Helps adjust spacing to improve visual alignment\r\n     */\r\n    offset?: number;\r\n    /**\r\n     * Z-index value to manage the layering of the popover in complex layouts\r\n     */\r\n    zIndex?: number;\r\n    /**\r\n     * Whether the popover can be nested within another popover or modal\r\n     * - Useful for creating complex UI elements without overlap issues\r\n     */\r\n    isNested?: boolean;\r\n}\r\nexport type PopoverPosition = 'top' | 'bottom' | 'left' | 'right' | 'center' | 'auto';\r\nexport type PopoverAlignment = 'start' | 'center' | 'end';\r\nexport type PopoverTriggerInteraction = 'click' | 'hover' | 'focus';\r\nexport interface PopoverAccessibility {\r\n    /**\r\n     * Describes the popover for screen readers, providing context for visually impaired users\r\n     */\r\n    ariaLabel?: string;\r\n    /**\r\n     * Indicates the relationship between the popover and the trigger element\r\n     * - Useful for defining `aria-labelledby` or `aria-describedby`\r\n     */\r\n    ariaDescribedBy?: string;\r\n    /**\r\n     * Determines the level of importance for screen reader announcements\r\n     * - 'polite' for non-urgent messages, 'assertive' for immediate messages\r\n     */\r\n    ariaLive?: 'polite' | 'assertive';\r\n}\r\n"}}
