{"code":"export {};\r\n","references":[],"dts":{"name":"/Users/ates/neobrutUI/neobrut-ui-kit/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/Notification/Notification.types.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\nexport interface NotificationProps {\r\n    /**\r\n     * The title or caption of the notification, providing context for the user\r\n     */\r\n    title: string;\r\n    /**\r\n     * The main message or content of the notification\r\n     */\r\n    message: string;\r\n    /**\r\n     * Type of notification to indicate its purpose or importance (informational, warning, success, danger)\r\n     */\r\n    variant?: NotificationVariant;\r\n    /**\r\n     * Determines if the notification is temporary (default) or permanent\r\n     * - If `true`, the notification will automatically disappear after the specified duration\r\n     * - If `false`, the notification remains visible until dismissed by the user\r\n     */\r\n    isTemporary?: boolean;\r\n    /**\r\n     * Duration for which the notification is visible (in seconds), applicable if `isTemporary` is true\r\n     * - Default recommendation is between 5 to 12 seconds for optimal user experience\r\n     */\r\n    duration?: number;\r\n    /**\r\n     * Callback function triggered when the notification is dismissed by the user\r\n     * - Useful for tracking user actions or updating state when the notification is closed\r\n     */\r\n    onDismiss?: () => void;\r\n    /**\r\n     * Callback function for handling custom actions within the notification (e.g., button click)\r\n     * - The `action` parameter can be used to identify which action was triggered\r\n     */\r\n    onAction?: (action: string) => void;\r\n    /**\r\n     * List of action buttons displayed at the bottom of the notification, allowing users to take specific actions\r\n     */\r\n    actions?: Array<NotificationAction>;\r\n    /**\r\n     * Position of the notification on the screen\r\n     * - Defines where the notification will appear (e.g., 'bottom-left', 'top-right')\r\n     */\r\n    position?: NotificationPosition;\r\n    /**\r\n     * Whether the notification should include a countdown indicator to show remaining time before dismissal\r\n     * - Adds a visual countdown bar or timer to enhance user awareness\r\n     */\r\n    hasCountdown?: boolean;\r\n    /**\r\n     * Whether the notification can be dismissed by swiping, specifically for mobile users\r\n     * - Enhances user experience on touch-enabled devices\r\n     */\r\n    dismissibleBySwipe?: boolean;\r\n    /**\r\n     * Custom class names for additional styling, allowing developers to override or extend styles\r\n     */\r\n    className?: string;\r\n    /**\r\n     * Whether the notification should stack with others vertically, useful when multiple notifications are displayed\r\n     */\r\n    stackable?: boolean;\r\n    /**\r\n     * Accessibility settings for the notification, ensuring compliance with WCAG guidelines\r\n     */\r\n    accessibility?: NotificationAccessibility;\r\n    /**\r\n     * Whether the notification includes an icon to provide visual emphasis\r\n     * - Icons can be used to quickly convey the type or importance of the notification\r\n     */\r\n    icon?: React.ReactNode;\r\n    /**\r\n     * Whether the notification should remain on top of other content (z-index management)\r\n     * - Helps ensure the notification is visible above overlays or modals\r\n     */\r\n    alwaysOnTop?: boolean;\r\n    /**\r\n     * Allows specifying a custom animation for notification appearance and dismissal\r\n     * - Examples: 'fade', 'slide', 'zoom'\r\n     */\r\n    animationType?: 'fade' | 'slide' | 'zoom' | 'none';\r\n    /**\r\n     * Delay before the notification appears (in milliseconds), useful for staggering notifications\r\n     */\r\n    delay?: number;\r\n    /**\r\n     * Width of the notification, allowing customization of its size (e.g., '300px', '50%')\r\n     */\r\n    width?: string;\r\n}\r\nexport type NotificationVariant = 'informational' | 'warning' | 'success' | 'danger';\r\nexport type NotificationPosition = 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right' | 'center';\r\nexport interface NotificationAction {\r\n    /**\r\n     * The label for the action button, describing the action to be taken\r\n     */\r\n    label: string;\r\n    /**\r\n     * Identifier for the action, used to differentiate between multiple actions\r\n     */\r\n    action: string;\r\n    /**\r\n     * Whether the action button is disabled, preventing user interaction\r\n     */\r\n    disabled?: boolean;\r\n    /**\r\n     * Optional icon to display alongside the action button\r\n     */\r\n    icon?: React.ReactNode;\r\n    /**\r\n     * Type of button variant to match notification style\r\n     */\r\n    variant?: NotificationButtonVariant;\r\n}\r\nexport type NotificationButtonVariant = 'accept' | 'reject' | 'neutral';\r\nexport interface NotificationAccessibility {\r\n    /**\r\n     * Describes the notification for screen readers, providing context for visually impaired users\r\n     */\r\n    ariaLabel?: string;\r\n    /**\r\n     * Indicates the level of importance for the notification, helping assistive technologies prioritize content\r\n     * - 'polite' for non-urgent information, 'assertive' for critical updates\r\n     */\r\n    ariaLive?: 'polite' | 'assertive';\r\n}\r\n"}}
