{"code":"import React, { useEffect, useRef } from 'react';\r\nimport { NotificationWrapper, NotificationHeader, NotificationContent, NotificationActions, NotificationButton, CountdownBar, } from './Notification.styles';\r\nvar Notification = function (_a) {\r\n    var title = _a.title, message = _a.message, _b = _a.variant, variant = _b === void 0 ? 'informational' : _b, _c = _a.isTemporary, isTemporary = _c === void 0 ? true : _c, _d = _a.duration, duration = _d === void 0 ? 7 : _d, onDismiss = _a.onDismiss, onAction = _a.onAction, _e = _a.actions, actions = _e === void 0 ? [] : _e, _f = _a.position, position = _f === void 0 ? 'top-right' : _f, _g = _a.hasCountdown, hasCountdown = _g === void 0 ? false : _g, _h = _a.dismissibleBySwipe, dismissibleBySwipe = _h === void 0 ? false : _h, className = _a.className, _j = _a.stackable, stackable = _j === void 0 ? true : _j, accessibility = _a.accessibility, icon = _a.icon, _k = _a.alwaysOnTop, alwaysOnTop = _k === void 0 ? false : _k, _l = _a.animationType, animationType = _l === void 0 ? 'fade' : _l, _m = _a.delay, delay = _m === void 0 ? 0 : _m, width = _a.width;\r\n    var notificationRef = useRef(null);\r\n    useEffect(function () {\r\n        var timeoutId;\r\n        if (isTemporary) {\r\n            timeoutId = setTimeout(function () {\r\n                onDismiss && onDismiss();\r\n            }, (duration + delay) * 1000);\r\n        }\r\n        return function () {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n        };\r\n    }, [isTemporary, duration, delay, onDismiss]);\r\n    useEffect(function () {\r\n        if (dismissibleBySwipe && notificationRef.current) {\r\n            var handleSwipe_1 = function (event) {\r\n                var touch = event.changedTouches[0];\r\n                if (touch.clientY < notificationRef.current.getBoundingClientRect().top) {\r\n                    onDismiss && onDismiss();\r\n                }\r\n            };\r\n            var element_1 = notificationRef.current;\r\n            element_1.addEventListener('touchend', handleSwipe_1);\r\n            return function () {\r\n                element_1.removeEventListener('touchend', handleSwipe_1);\r\n            };\r\n        }\r\n    }, [dismissibleBySwipe, onDismiss]);\r\n    return (React.createElement(NotificationWrapper, { ref: notificationRef, variant: variant, position: position, alwaysOnTop: alwaysOnTop, animationType: animationType, className: className, width: width, duration: duration, title: title, message: message },\r\n        React.createElement(NotificationHeader, null,\r\n            icon && React.createElement(\"span\", null, icon),\r\n            React.createElement(\"span\", null, title),\r\n            onDismiss && (React.createElement(\"button\", { onClick: onDismiss, \"aria-label\": (accessibility === null || accessibility === void 0 ? void 0 : accessibility.ariaLabel) || 'Close notification' }, \"\\u00D7\"))),\r\n        React.createElement(NotificationContent, null, message),\r\n        actions.length > 0 && (React.createElement(NotificationActions, null, actions.map(function (action, index) { return (React.createElement(NotificationButton, { key: index, onClick: function () { return onAction && onAction(action.action); }, disabled: action.disabled, title: title },\r\n            action.icon && React.createElement(\"span\", null, action.icon),\r\n            action.label)); }))),\r\n        hasCountdown && isTemporary && React.createElement(CountdownBar, { duration: duration, title: title, message: message })));\r\n};\r\nexport default Notification;\r\n","references":["/Users/ates/neobrutUI/neobrut-ui-kit/node_modules/@types/react/ts5.0/index.d.ts","/Users/ates/neobrutUI/neobrut-ui-kit/src/components/Notification/Notification.styles.ts","/Users/ates/neobrutUI/neobrut-ui-kit/src/components/Notification/Notification.types.ts"],"dts":{"name":"/Users/ates/neobrutUI/neobrut-ui-kit/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/Notification/Notification.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\r\nimport { NotificationProps } from './Notification.types';\r\ndeclare const Notification: React.FC<NotificationProps>;\r\nexport default Notification;\r\n"}}
