{"code":"import { __assign } from \"tslib\";\nimport React from 'react';\nimport { StyledButton } from './Button.styles';\nvar Button = function (_a) {\n    var label = _a.label, onClick = _a.onClick, _b = _a.disabled, disabled = _b === void 0 ? false : _b, _c = _a.variant, variant = _c === void 0 ? 'primary' : _c, _d = _a.size, size = _d === void 0 ? 'medium' : _d, _e = _a.loading, loading = _e === void 0 ? false : _e, icon = _a.icon, tooltip = _a.tooltip, className = _a.className, _f = _a.fontWeight, fontWeight = _f === void 0 ? 400 : _f, _g = _a.fontSize, fontSize = _g === void 0 ? 16 : _g, _h = _a.letterSpacing, letterSpacing = _h === void 0 ? 0.5 : _h, _j = _a.textTransform, textTransform = _j === void 0 ? 'none' : _j, _k = _a.lineHeight, lineHeight = _k === void 0 ? 1.5 : _k, maxLines = _a.maxLines, customDimensions = _a.customDimensions;\n    // Convert size prop to match StyledButton size prop type\n    var getButtonSize = function (size) {\n        switch (size) {\n            case 'tiny':\n                return 'small';\n            case 'xlarge':\n            case 'custom':\n                return 'large';\n            default:\n                return size;\n        }\n    };\n    return (React.createElement(StyledButton, { onClick: onClick, disabled: disabled || loading, variant: variant, size: getButtonSize(size), title: tooltip, className: className, style: __assign(__assign(__assign({ fontWeight: fontWeight, fontSize: fontSize, letterSpacing: \"\".concat(letterSpacing, \"px\"), textTransform: textTransform, lineHeight: lineHeight, display: 'flex', alignItems: 'center', justifyContent: 'center' }, (maxLines && {\n            display: '-webkit-box',\n            WebkitLineClamp: maxLines,\n            WebkitBoxOrient: 'vertical',\n            overflow: 'hidden'\n        })), ((customDimensions === null || customDimensions === void 0 ? void 0 : customDimensions.height) && {\n            height: \"\".concat(customDimensions.height, \"px\")\n        })), ((customDimensions === null || customDimensions === void 0 ? void 0 : customDimensions.padding) && {\n            padding: \"\".concat(customDimensions.padding.vertical, \"px \").concat(customDimensions.padding.horizontal, \"px\")\n        })) }, loading ? (React.createElement(\"span\", { className: \"spinner\" })) : (React.createElement(React.Fragment, null,\n        icon && React.createElement(\"span\", { className: \"icon\" }, icon),\n        label))));\n};\nexport default Button;\n","references":["/Users/ates/neobrutUI/neobrut-ui-kit/node_modules/@types/react/index.d.ts","/Users/ates/neobrutUI/neobrut-ui-kit/src/components/Button/Button.types.ts","/Users/ates/neobrutUI/neobrut-ui-kit/src/components/Button/Button.styles.ts"],"dts":{"name":"/Users/ates/neobrutUI/neobrut-ui-kit/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/Button/Button.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\nimport { ButtonProps } from './Button.types';\ndeclare const Button: React.FC<ButtonProps>;\nexport default Button;\n"}}
