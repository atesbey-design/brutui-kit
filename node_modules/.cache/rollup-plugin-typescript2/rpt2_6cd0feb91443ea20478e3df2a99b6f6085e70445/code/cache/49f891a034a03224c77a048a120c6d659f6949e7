{"code":"import { __spreadArray } from \"tslib\";\r\nimport React, { useState } from 'react';\r\nimport { TableContainer, Table, TableHeader, TableHeaderCell, TableCell, TableRow, TableBody } from './Datatable.styles';\r\nimport Checkbox from '../Checkbox/Checkbox';\r\nvar DataTableRow = function (_a) {\r\n    var rowData = _a.rowData, columns = _a.columns, selectable = _a.selectable, onSelect = _a.onSelect, rowStyle = _a.rowStyle, rowClassName = _a.rowClassName, selected = _a.selected;\r\n    return (React.createElement(TableRow, { style: rowStyle, className: rowClassName, selectable: selectable, selected: selected },\r\n        selectable && (React.createElement(TableCell, null,\r\n            React.createElement(Checkbox, { label: \"Select\", onChange: function (checked) { return onSelect === null || onSelect === void 0 ? void 0 : onSelect(checked); }, checked: selected }))),\r\n        columns.map(function (column) { return (React.createElement(TableCell, { key: column.accessor, style: column.cellStyle, className: column.cellClassName }, column.cellRenderer\r\n            ? column.cellRenderer(rowData[column.accessor])\r\n            : rowData[column.accessor])); })));\r\n};\r\nexport var DataTable = function (_a) {\r\n    var data = _a.data, columns = _a.columns, onRowSelect = _a.onRowSelect, _b = _a.selectable, selectable = _b === void 0 ? false : _b, _c = _a.rowsPerPage, rowsPerPage = _c === void 0 ? 10 : _c, className = _a.className, onSort = _a.onSort;\r\n    var _d = useState([]), selectedRows = _d[0], setSelectedRows = _d[1];\r\n    var _e = useState(''), sortColumn = _e[0], setSortColumn = _e[1];\r\n    var _f = useState('asc'), sortDirection = _f[0], setSortDirection = _f[1];\r\n    var _g = useState(1), currentPage = _g[0], setCurrentPage = _g[1];\r\n    var handleSort = function (column) {\r\n        var newDirection = sortColumn === column && sortDirection === 'asc' ? 'desc' : 'asc';\r\n        setSortColumn(column);\r\n        setSortDirection(newDirection);\r\n        onSort === null || onSort === void 0 ? void 0 : onSort(column, newDirection);\r\n    };\r\n    var handleRowSelect = function (row, selected) {\r\n        var updatedSelection = selected\r\n            ? __spreadArray(__spreadArray([], selectedRows, true), [row], false) : selectedRows.filter(function (r) { return r !== row; });\r\n        setSelectedRows(updatedSelection);\r\n        onRowSelect === null || onRowSelect === void 0 ? void 0 : onRowSelect(updatedSelection);\r\n    };\r\n    var totalPages = Math.ceil(data.length / rowsPerPage);\r\n    var startIndex = (currentPage - 1) * rowsPerPage;\r\n    var endIndex = startIndex + rowsPerPage;\r\n    var currentData = data.slice(startIndex, endIndex);\r\n    return (React.createElement(TableContainer, { className: className },\r\n        React.createElement(Table, null,\r\n            React.createElement(TableHeader, null,\r\n                React.createElement(\"tr\", null,\r\n                    selectable && (React.createElement(TableHeaderCell, null,\r\n                        React.createElement(Checkbox, { label: \"Select\", onChange: function (checked) {\r\n                                var newSelection = checked ? __spreadArray([], data, true) : [];\r\n                                setSelectedRows(newSelection);\r\n                                onRowSelect === null || onRowSelect === void 0 ? void 0 : onRowSelect(newSelection);\r\n                            }, indeterminate: selectedRows.length > 0 && selectedRows.length < data.length, checked: selectedRows.length === data.length }))),\r\n                    columns.map(function (column) { return (React.createElement(TableHeaderCell, { key: column.accessor, sortable: column.sortable, sortDirection: sortColumn === column.accessor ? sortDirection : undefined, width: column.width, onClick: function () { return column.sortable && handleSort(column.accessor); } }, column.header)); }))),\r\n            React.createElement(TableBody, null, currentData.map(function (row, index) { return (React.createElement(DataTableRow, { key: index, rowData: row, columns: columns, selectable: selectable, onSelect: function (selected) { return handleRowSelect(row, selected); }, selected: selectedRows.includes(row), rowStyle: undefined, rowClassName: undefined })); })))));\r\n};\r\nexport default DataTable;\r\n","references":["/Users/ates/neobrutUI/neobrut-ui-kit/node_modules/@types/react/ts5.0/index.d.ts","/Users/ates/neobrutUI/neobrut-ui-kit/src/components/Datatable/Datatable.types.ts","/Users/ates/neobrutUI/neobrut-ui-kit/src/components/Datatable/Datatable.styles.ts","/Users/ates/neobrutUI/neobrut-ui-kit/src/components/Checkbox/Checkbox.tsx"],"dts":{"name":"/Users/ates/neobrutUI/neobrut-ui-kit/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/Datatable/Datatable.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\r\nimport { DataTableProps } from './Datatable.types';\r\nexport declare const DataTable: React.FC<DataTableProps>;\r\nexport default DataTable;\r\n"}}
