{"code":"import React, { useEffect, useRef, useState } from 'react';\r\nimport { PopoverWrapper, PopoverContent, TriggerWrapper, PopoverCloseButton } from './Popover.styles';\r\nimport { X } from 'lucide-react';\r\nvar Popover = function (_a) {\r\n    var content = _a.content, controlledIsOpen = _a.isOpen, triggerElement = _a.triggerElement, _b = _a.position, position = _b === void 0 ? 'auto' : _b, _c = _a.alignment, alignment = _c === void 0 ? 'center' : _c, onOpen = _a.onOpen, onClose = _a.onClose, _d = _a.closeOnOutsideClick, closeOnOutsideClick = _d === void 0 ? true : _d, className = _a.className, _e = _a.autoAdjust, autoAdjust = _e === void 0 ? true : _e, accessibility = _a.accessibility, _f = _a.hasArrow, hasArrow = _f === void 0 ? true : _f, _g = _a.delay, delay = _g === void 0 ? 0 : _g, width = _a.width, height = _a.height, _h = _a.dismissibleByEscape, dismissibleByEscape = _h === void 0 ? true : _h, _j = _a.animationType, animationType = _j === void 0 ? 'fade' : _j, _k = _a.sticky, sticky = _k === void 0 ? false : _k, maxHeight = _a.maxHeight, _l = _a.triggerInteraction, triggerInteraction = _l === void 0 ? 'click' : _l, _m = _a.offset, offset = _m === void 0 ? 8 : _m, zIndex = _a.zIndex, _o = _a.isNested, isNested = _o === void 0 ? false : _o, variant = _a.variant, bgColor = _a.bgColor, textColor = _a.textColor, borderColor = _a.borderColor;\r\n    var _p = useState(false), internalIsOpen = _p[0], setInternalIsOpen = _p[1];\r\n    var isOpen = controlledIsOpen !== null && controlledIsOpen !== void 0 ? controlledIsOpen : internalIsOpen;\r\n    var popoverRef = useRef(null);\r\n    var triggerRef = useRef(null);\r\n    var handleTriggerClick = function () {\r\n        setInternalIsOpen(!isOpen);\r\n    };\r\n    var handleClose = function () {\r\n        setInternalIsOpen(false);\r\n        onClose === null || onClose === void 0 ? void 0 : onClose();\r\n    };\r\n    useEffect(function () {\r\n        if (isOpen) {\r\n            onOpen === null || onOpen === void 0 ? void 0 : onOpen();\r\n        }\r\n        else {\r\n            onClose === null || onClose === void 0 ? void 0 : onClose();\r\n        }\r\n    }, [isOpen, onOpen, onClose]);\r\n    useEffect(function () {\r\n        if (dismissibleByEscape) {\r\n            var handleEscapeKey_1 = function (event) {\r\n                if (event.key === 'Escape' && isOpen) {\r\n                    setInternalIsOpen(false);\r\n                    onClose === null || onClose === void 0 ? void 0 : onClose();\r\n                }\r\n            };\r\n            document.addEventListener('keydown', handleEscapeKey_1);\r\n            return function () {\r\n                document.removeEventListener('keydown', handleEscapeKey_1);\r\n            };\r\n        }\r\n    }, [dismissibleByEscape, isOpen, onClose]);\r\n    useEffect(function () {\r\n        if (closeOnOutsideClick && isOpen) {\r\n            var handleClickOutside_1 = function (event) {\r\n                if (popoverRef.current &&\r\n                    !popoverRef.current.contains(event.target) &&\r\n                    triggerRef.current &&\r\n                    !triggerRef.current.contains(event.target)) {\r\n                    setInternalIsOpen(false);\r\n                    onClose === null || onClose === void 0 ? void 0 : onClose();\r\n                }\r\n            };\r\n            document.addEventListener('mousedown', handleClickOutside_1);\r\n            return function () {\r\n                document.removeEventListener('mousedown', handleClickOutside_1);\r\n            };\r\n        }\r\n    }, [closeOnOutsideClick, isOpen, onClose]);\r\n    return (React.createElement(PopoverWrapper, null,\r\n        React.createElement(TriggerWrapper, { ref: triggerRef, onClick: handleTriggerClick }, triggerElement),\r\n        isOpen && (React.createElement(PopoverContent, { ref: popoverRef, className: className, role: \"dialog\", \"aria-label\": accessibility === null || accessibility === void 0 ? void 0 : accessibility.ariaLabel, \"aria-describedby\": accessibility === null || accessibility === void 0 ? void 0 : accessibility.ariaDescribedBy, \"aria-live\": accessibility === null || accessibility === void 0 ? void 0 : accessibility.ariaLive, position: position, width: width, height: height, maxHeight: maxHeight, zIndex: zIndex, animationType: animationType, variant: variant, bgColor: bgColor, textColor: textColor, borderColor: borderColor },\r\n            React.createElement(PopoverCloseButton, { onClick: handleClose, \"aria-label\": \"Close popover\" },\r\n                React.createElement(X, { size: 16 })),\r\n            content))));\r\n};\r\nexport default Popover;\r\n","references":["/Users/ates/neobrutUI/neobrut-ui-kit/node_modules/@types/react/ts5.0/index.d.ts","/Users/ates/neobrutUI/neobrut-ui-kit/src/components/Popover/Popover.types.ts","/Users/ates/neobrutUI/neobrut-ui-kit/src/components/Popover/Popover.styles.ts","/Users/ates/neobrutUI/neobrut-ui-kit/node_modules/lucide-react/dist/lucide-react.d.ts"],"dts":{"name":"/Users/ates/neobrutUI/neobrut-ui-kit/node_modules/.cache/rollup-plugin-typescript2/placeholder/components/Popover/Popover.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\r\nimport { PopoverProps } from './Popover.types';\r\ndeclare const Popover: React.FC<PopoverProps>;\r\nexport default Popover;\r\n"}}
